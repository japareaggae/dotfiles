#!/bin/bash
# aur - A basic AUR helper
# Written by Renan Guilherme <japareaggae@gmail.com>
# Released under the public domain <http://unlicense.org/UNLICENSE>
# Inspired by faho's fish script:
# https://github.com/faho/config/blob/master/fish/.config/fish/functions/aur.fish

if ! [[ -x /usr/bin/jshon ]]
then
	echo "Error: jshon is required to run this script"
	exit 1
fi

_usage(){
cat << EOF
Usage: aur (action) (package)

Actions:
    search - Search for the specified keyword
    info   - Shows information for specified package
    clone  - Clones the repository for a package
EOF
}

_search(){
	JSON="$(curl -s "https://aur.archlinux.org/rpc.php?v=4&type=search&arg=$1")"
	RESULTS=$(printf "$JSON" | jshon -e resultcount -u )
	if [[ $RESULTS -eq 0 ]]
	then
		echo "No results found."
		exit 1
	fi
	NAME=($(printf "$JSON" | jshon -e results -a -e Name -u))
	readarray -t DESCRIPTION < <(printf "$JSON" | jshon -e results -a -e Description -u)
	VERSION=($(printf "$JSON" | jshon -e results -a -e Version -u))

	for PKG in $(seq 0 $(($RESULTS-1)))
	do
		printf "${NAME[$PKG]} ${VERSION[$PKG]}\n"
		printf "    ${DESCRIPTION[$PKG]}\n"
	done
}

_info(){
	JSON="$(curl -s "https://aur.archlinux.org/rpc.php?v=4&type=info&arg=$1")"
	RESULTS=$(printf "$JSON" | jshon -e resultcount -u )
	if [[ $RESULTS -eq 0 ]]
	then
		echo "No results found."
		exit 1
	fi

	NAME=$(printf "$JSON" | jshon -e results -a -e Name -u)
	PKGBASE=$(printf "$JSON" | jshon -e results -a -e PackageBase -u)
	DESCRIPTION="$(printf "$JSON" | jshon -e results -a -e Description -u)"
	VERSION=$(printf "$JSON" | jshon -e results -a -e Version -u)
	URL=$(printf "$JSON" | jshon -e results -a -e URL -u)

	cat << EOF
Name         : $NAME
Package Base : $PKGBASE
Version      : $VERSION
Description  : $DESCRIPTION
URL          : $URL
AUR URL      : https://aur.archlinux.org/packages/$NAME
Clone URL    : https://aur.archlinux.org/$PKGBASE.git
EOF
}

_clone(){
	git clone https://aur.archlinux.org/$1.git ~/Development/pkgbuilds/$1
}

case $1 in
	"search") shift; _search $1 ;;
	"info")   shift; _info $1 ;;
	"clone")  shift; _clone $1 ;;
	*)        _usage ;;
esac

