#!/bin/bash
# aur - A basic AUR helper
# Written by Renan Guilherme <japareaggae@gmail.com>
# Released under the public domain <http://unlicense.org/UNLICENSE>
# Inspired by faho's fish script:
# https://github.com/faho/config/blob/master/fish/.config/fish/functions/aur.fish

# This is probably the world's most disgusting shell script, but it works
# (sometimes), so it's probably not gonna get cleaned anytime soon.

if ! ( hash jshon 2> /dev/null )
then
	echo "Error: jshon is required to run this script"
	exit 1
fi

BOLD="$(tput bold)"
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
CYAN="$(tput setaf 6)"
RESET="$(tput sgr0)"

WHERE=${AURDEST:-$HOME/Development/pkgbuilds}

_usage(){
cat << EOF
Usage: aur (action) [options] (package)

Actions:
    search   - Search for the specified keyword
    info     - Shows information for specified package
    clone    - Clones the repository for a package
               Add -d to clone the package and its dependencies
               (Requires the aurutils package)
    download - Download a snapshot of the package's repository
               Add -d to download the package and its dependencies
               (Requires the aurutils package)
    check    - Check installed packages for AUR updates
               Add -v to show packages which have lower versions on AUR
    changes  - View the latest commits for this package on the AUR

EOF
}

_search(){
	JSON="$(curl -s "https://aur.archlinux.org/rpc.php?v=5&type=search&arg=$1")"
	RESULTS=$(printf "$JSON" | jshon -e resultcount -u )
	if [[ $RESULTS -eq 0 ]]
	then
		echo "No results found."
		exit 1
	fi
	NAME=($(printf "$JSON" | jshon -e results -a -e Name -u))
	readarray -t DESCRIPTION < <(printf "$JSON" | jshon -e results -a -e Description -u)
	VERSION=($(printf "$JSON" | jshon -e results -a -e Version -u))
	OOD=($(printf "$JSON" | jshon -e results -a -e OutOfDate -u))

	for PKG in $(seq 0 $(($RESULTS-1)))
	do
		if [[ ${OOD[$PKG]} == "null" ]]; then
			PKG_VERSION="$GREEN${VERSION[$PKG]}"
		else
			PKG_VERSION="$RED${VERSION[$PKG]}"
		fi

		printf "$BOLD${NAME[$PKG]} $PKG_VERSION$RESET\n"
		printf "    ${DESCRIPTION[$PKG]}\n"
	done
}

_info(){
	JSON="$(curl -s "https://aur.archlinux.org/rpc.php?v=5&type=info&arg=$1")"
	RESULTS=$(printf "$JSON" | jshon -e resultcount -u )
	if [[ $RESULTS -eq 0 ]]
	then
		echo "No results found."
		exit 1
	fi

	NAME=$(printf "$JSON" | jshon -e results -a -e Name -u)
	PKGBASE=$(printf "$JSON" | jshon -e results -a -e PackageBase -u)
	VERSION=$(printf "$JSON" | jshon -e results -a -e Version -u)
	DESCRIPTION="$(printf "$JSON" | jshon -e results -a -e Description -u)"
	MAINTAINER="$(printf "$JSON" | jshon -e results -a -e Maintainer -u)"
	URL=$(printf "$JSON" | jshon -e results -a -e URL -u)
	VOTES="$(printf "$JSON" | jshon -e results -a -e NumVotes -u)"
	POPULARITY="$(printf "$JSON" | jshon -e results -a -e Popularity -u)"
	UPDATED="$(printf "$JSON" | jshon -e results -a -e LastModified -u)"

	DEPCOUNT="$(printf "$JSON" | jshon -e results -a -e Depends -l)"
	for i in $(seq $DEPCOUNT); do
		if [[ $i == 1 ]]; then
			DEPENDENCIES="$(printf "$JSON" | jshon -e results -a -e Depends -e $(($i - 1)) -u)"
		else
			DEPENDENCIES="$DEPENDENCIES $(printf "$JSON" | jshon -e results -a -e Depends -e $(($i - 1)) -u)"
		fi
	done

	OOD="$(printf "$JSON" | jshon -e results -a -e OutOfDate -u)"
	if [[ "$OOD" == "null" ]]; then
		VERSION="${BOLD}${GREEN}${VERSION}${RESET}"
	else
		WHEN="$(date -d @$OOD)"
		VERSION="${BOLD}${RED}${VERSION} (out of date since ${WHEN})${RESET}"
	fi

	cat << EOF
${BOLD}Name            ${RESET}: ${BOLD}${NAME}${RESET}
${BOLD}Package Base    ${RESET}: ${BOLD}${PKGBASE}${RESET}
${BOLD}Version         ${RESET}: ${VERSION}
${BOLD}Description     ${RESET}: ${DESCRIPTION}
${BOLD}URL             ${RESET}: ${CYAN}${URL}${RESET}
${BOLD}Dependencies    ${RESET}: ${DEPENDENCIES}
${BOLD}Maintainer      ${RESET}: ${MAINTAINER}
${BOLD}Popularity      ${RESET}: ${POPULARITY} (${VOTES} votes)
${BOLD}Last update     ${RESET}: $(date -d @${UPDATED})
${BOLD}AUR URL         ${RESET}: ${CYAN}https://aur.archlinux.org/packages/${NAME}${RESET}
${BOLD}AUR Changelog   ${RESET}: ${CYAN}https://aur.archlinux.org/cgit/aur.git/log/?h=${PKGBASE}${RESET}
${BOLD}Clone URL       ${RESET}: ${CYAN}https://aur.archlinux.org/${PKGBASE}.git${RESET}
EOF
}

_clone(){
	if [[ $1 == "-d" ]]; then
		shift
		for PACKAGE in $(aurchain $1); do
			git clone https://aur.archlinux.org/$PACKAGE.git $WHERE/$PACKAGE
		done
	else
	git clone https://aur.archlinux.org/$1.git $WHERE/$1
	fi
}

_download(){
	if [[ $1 == "-d" ]]; then
		shift
		for PACKAGE in $(aurchain $1); do
			curl -o $WHERE/$PACKAGE.tar.gz https://aur.archlinux.org/cgit/aur.git/snapshot/$PACKAGE.tar.gz
			(
			cd $WHERE
			tar xvf $PACKAGE.tar.gz
			rm $PACKAGE.tar.gz
			)
		done
	else
		curl -o $WHERE/$1.tar.gz https://aur.archlinux.org/cgit/aur.git/snapshot/$1.tar.gz
		(
		cd $WHERE
		tar xvf $1.tar.gz
		rm $1.tar.gz
		)
	fi
}

_check(){
	for PACKAGE in $(pacman -Qqm); do
		LOCAL_VERSION=$(pacman -Qi $PACKAGE | grep Version | awk '{print $3}')
		JSON="$(curl -s "https://aur.archlinux.org/rpc.php?v=5&type=info&arg=$PACKAGE")"
		AUR_VERSION=$(printf "$JSON" | jshon -e results -a -e Version -u)

		case "$(vercmp $AUR_VERSION $LOCAL_VERSION)" in
			1) printf "$PACKAGE: $LOCAL_VERSION -> $AUR_VERSION\n" ;;
			0) ;;
			-1) [[ $1 == "-v" ]] && printf "$PACKAGE: $LOCAL_VERSION (local) is higher than $AUR_VERSION (aur)\n" ;;
		esac

	done
}

_changes(){
	[[ $1 ]] && xdg-open "https://aur.archlinux.org/cgit/aur.git/log/?h=$1"
}

case $1 in
	"search") shift; _search $1 ;;
	"info")   shift; _info $1 ;;
	"clone")  shift; _clone $1 $2 ;;
	"download") shift; _download $1 $2 ;;
	"check")  shift; _check $1 ;;
	"changes") shift; _changes $1 ;;
	*)        _usage ;;
esac

