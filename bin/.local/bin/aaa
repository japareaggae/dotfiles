#!/bin/bash
# aaa - Another AUR assistant...
# Written by Renan Guilherme <japareaggae@gmail.com>
# Released under the public domain <http://unlicense.org/UNLICENSE>
# Inspired by faho's fish script:
# https://github.com/faho/config/blob/master/fish/.config/fish/functions/aur.fish

MYNAME=${0##*/}

BOLD="$(tput bold)"
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
CYAN="$(tput setaf 6)"
RESET="$(tput sgr0)"

WHERE=${AURDEST:-$HOME/Development/pkgbuilds}

_usage(){
cat << EOF
Usage: $MYNAME (action) [options] (package)

Actions:
    changes    - View the latest commits for this package on the AUR
    check      - Check installed packages for AUR updates
    clean      - Remove built packages and source tarballs
                 Add -p to only print files that would be deleted
    repo-clean - Remove repositories for uninstalled packages
    clone      - Clones the repository for a package
                 Add -d to clone the package and its dependencies
    download   - Download a snapshot of the package's repository
                 Add -d to download the package and its dependencies
    info       - Shows information for specified package
    search     - Search for the specified keyword
    update     - Update PKGBUILDs for installed AUR packages
    update-vcs - Update PKGBUILDs for VCS packages and rebuilds them

The search, check, update, clone (with -d) and download (with -d) actions
require aurutils.
The info action requires jq.

EOF
}

### Helper functions
_check_jq(){
	if ! ( hash jq 2> /dev/null )
	then
		echo "Error: jq is required for this action"
		exit 1
	fi
}

_check_aurutils(){
	if ! ( hash aur 2> /dev/null )
	then
		echo "Error: aurutils is required for this action"
		exit 1
	fi
}

_update_pkgbuilds(){
	echo "${BOLD}==> Updating PKGBUILD for $1${RESET}"
	cd $WHERE/$1
	git checkout master # switch to upstream branch
	git checkout HEAD . # remove all modifications (you are using a branch for that, right?)
	git pull --ff-only  # get pkgbuild changes from AUR
}
#####

_search(){
	_check_aurutils || exit 1
	[[ $1 ]] || { echo "Usage: $MYNAME search (keyword)"; exit 1; }
	aur search "$1"
}

# A bit ugly, but it works (most of the time)
_info(){
	_check_jq || exit 1
	[[ $1 ]] || { echo "Usage: $MYNAME info (package)"; exit 1; }
	read -r JSON < <(curl -s "https://aur.archlinux.org/rpc.php?v=5&type=info&arg=$1")

	if [[ $(printf "$JSON" | jq .resultcount) -eq 0 ]]; then
		echo "No results found."
		exit 1
	fi

	NAME=$(printf "$JSON" | jq -r '.results|.[0]|.Name')
	PKGBASE=$(printf "$JSON" | jq -r '.results|.[0]|.PackageBase')
	VERSION=$(printf "$JSON" | jq -r '.results|.[0]|.Version')
	DESCRIPTION="$(printf "$JSON" | jq -r '.results|.[0]|.Description')"
	URL=$(printf "$JSON" | jq -r '.results|.[0]|.URL')
	DEPENDENCIES="$(printf "$JSON" | jq -r '.results|.[0]|.Depends|.[]' | tr '\n' ' ')"
	MAINTAINER="$(printf "$JSON" | jq -r '.results|.[0]|.Maintainer')"
	POPULARITY="$(printf "$JSON" | jq -r '.results|.[0]|.Popularity')"
	VOTES="$(printf "$JSON" | jq -r '.results|.[0]|.NumVotes')"
	UPDATED="$(printf "$JSON" | jq -r '.results|.[0]|.LastModified')"
	OOD="$(printf "$JSON" | jq -r '.results|.[0]|.OutOfDate')"
	if [[ "$OOD" == "null" ]]; then
		VERSION="${BOLD}${GREEN}${VERSION}${RESET}"
	else
		WHEN="$(date -d @$OOD)"
		VERSION="${BOLD}${RED}${VERSION} (out of date since ${WHEN})${RESET}"
	fi

	cat << EOF
${BOLD}Name            ${RESET}: ${BOLD}${NAME}${RESET}
${BOLD}Package Base    ${RESET}: ${BOLD}${PKGBASE}${RESET}
${BOLD}Version         ${RESET}: ${VERSION}
${BOLD}Description     ${RESET}: ${DESCRIPTION}
${BOLD}URL             ${RESET}: ${CYAN}${URL}${RESET}
${BOLD}Dependencies    ${RESET}: ${DEPENDENCIES}
${BOLD}Maintainer      ${RESET}: ${MAINTAINER}
${BOLD}Popularity      ${RESET}: ${POPULARITY} (${VOTES} votes)
${BOLD}Last update     ${RESET}: $(date -d @${UPDATED})
${BOLD}AUR URL         ${RESET}: ${CYAN}https://aur.archlinux.org/packages/${NAME}${RESET}
${BOLD}AUR Changelog   ${RESET}: ${CYAN}https://aur.archlinux.org/cgit/aur.git/log/?h=${PKGBASE}${RESET}
${BOLD}Clone URL       ${RESET}: ${CYAN}https://aur.archlinux.org/${PKGBASE}.git${RESET}
EOF
}

_clone(){
	if [[ $1 == "-d" ]]; then
		shift
		_check_aurutils || exit 1
		while [[ $1 ]]; do
			for PACKAGE in $(aur depends $1); do
				git clone https://aur.archlinux.org/$PACKAGE.git $WHERE/$PACKAGE
			done
			shift
		done
	else
		while [[ $1 ]]; do
			git clone https://aur.archlinux.org/$1.git $WHERE/$1
			shift
		done
	fi
}

_download(){
	if [[ $1 == "-d" ]]; then
		_check_aurutils || exit 1
		shift
		[[ $1 ]] || { echo "Usage: $MYNAME download (package)"; exit 1; }
		for PACKAGE in $(aur depends $1); do
			curl -o $WHERE/$PACKAGE.tar.gz https://aur.archlinux.org/cgit/aur.git/snapshot/$PACKAGE.tar.gz
			(
			cd $WHERE
			tar xvf $PACKAGE.tar.gz
			rm $PACKAGE.tar.gz
			)
		done
	else
		[[ $1 ]] || { echo "Usage: $MYNAME download (package)"; exit 1; }
		curl -o $WHERE/$1.tar.gz https://aur.archlinux.org/cgit/aur.git/snapshot/$1.tar.gz
		(
		cd $WHERE
		tar xvf $1.tar.gz
		rm $1.tar.gz
		)
	fi
}

_check(){
	_check_aurutils || exit 1
	pacman -Qm | aur vercmp
}

_update(){
	for PACKAGE in $(_check | cut -d: -f1 )
	do
		_update_pkgbuilds $PACKAGE
		if [[ $1 == "-b" ]]; then
			makepkg -sic
		fi
	done
}

_update_vcs(){
	### TODO: This is "update_vcs" but only updates git packages...
	for PACKAGE in $(pacman -Qqm | grep -- '-git')
	do
		_update_pkgbuilds $PACKAGE
		makepkg -sic --noconfirm
	done
}

_changes(){
	[[ $1 ]] && xdg-open "https://aur.archlinux.org/cgit/aur.git/log/?h=$1"
}

_clean(){
	[[ $1 == "-p" ]] && PRETEND=1
	echo "${BOLD}${YELLOW}==>${RESET}${BOLD} Listing built packages${RESET}"
	find $WHERE -iname '*.pkg.tar*' | sed "s|$WHERE/||g"
	if (( ! PRETEND )); then
		echo "${BOLD}${RED}==>${RESET}${BOLD} Cleaning built packages${RESET}"
		find $WHERE -iname '*.pkg.tar*' -delete
	fi
	echo "${BOLD}${YELLOW}==>${RESET}${BOLD} Listing source packages${RESET}"
	find $WHERE | grep -P '(?!^.+(?:\.pkg)(?:\..+)?$)(^.+\.tar(?:\..+)?$)' | sed "s|$WHERE/||g"
	if (( ! PRETEND )); then
		echo "${BOLD}${RED}==>${RESET}${BOLD} Cleaning source packages${RESET}"
		find $WHERE | grep -P '(?!^.+(?:\.pkg)(?:\..+)?$)(^.+\.tar(?:\..+)?$)' | xargs /bin/rm
	fi
}

_repo-clean(){
	for repo in $(grep -Fvf <(pacman -Qqm) <(fd . $WHERE -td -d1)); do
		printf "Remove $repo? [Y/n] "
		read yesno
		if [[ -z $yesno ]] || [[ $yesno == "y"* ]]; then
			echo "Removing $repo"
			rm -rf $repo
		fi
	done
}

case $1 in
	"search") shift; _search $1 ;;
	"info")   shift; _info $1 ;;
	"clone")  shift; _clone $@ ;;
	"download") shift; _download $1 $2 ;;
	"check")  shift; _check $1 ;;
	"update") shift; _update $1 ;;
	"update-vcs") shift; _update_vcs ;;
	"changes") shift; _changes $1 ;;
	"clean")  shift; _clean $1 ;;
	"repo-clean")  shift; _repo-clean ;;
	*)        _usage ;;
esac

