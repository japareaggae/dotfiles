#!/bin/bash
#
# recovery: Synchronize an alternative, encrypted install of Arch Linux

### Options
# RECOVERY: Path to the recovery system root partition, inside a LUKS volume
#RECOVERY="/dev/disk/by-uuid/ab12fa00-756d-4188-a9ec-8c5e2a532b61"

# RECOVERY_BOOT: Path to the recovery system boot partition
#RECOVERY_BOOT="/dev/disk/by-uuid/AAAA-A11A"

# MOUNTPOINT: Where the recovery system will be mounted.
# The RECOVERY_BOOT partition will be mounted on a /boot directory here.
MOUNTPOINT="/media/recovery"

# KEY: Text file containing the recovery system LUKS passphrase
# Create with:
# # printf 'super secret password' > /etc/recovery-key
# # chmod 600 /etc/recovery-key
KEY="/etc/recovery-key"

# FOLDERS: Array of directories to be rsynced
# You may need to change the rsync call in the script
SYNC_FOLDERS=(
	"/home/aurantius/.gnupg"
	"/home/aurantius/.password-store"
	"/home/aurantius/.ssh"
	"/home/aurantius/Documents/PC Files"
	"/home/aurantius/Dropbox"
)

SYNC_DESTINATION="/media/recovery/home/aurantius"
##########

if [[ $UID != 0 ]]; then
	echo "This script requires root privileges."
	exit 1
fi

CBOLD=$(tput bold)
CRESET=$(tput sgr0)
readonly CBOLD CRESET

message() {
	local mesg=$1; shift
	printf "${CBOLD}==> ${mesg}${CRESET}\n" "$@"
}

recovery_open() {
	cryptsetup -d $KEY open $RECOVERY recovery
	if [[ $? != 0 ]]; then
		echo "ERROR: cryptsetup failed to open recovery system"
		exit 1
	fi
	[[ -d "$MOUNTPOINT" ]] || mkdir -p $MOUNTPOINT
	mount /dev/mapper/recovery $MOUNTPOINT
	mount $RECOVERY_BOOT $MOUNTPOINT/boot
}

recovery_close() {
	umount -R $MOUNTPOINT
	cryptsetup close recovery
}

try_chroot() {
	if ( hash arch-chroot 2> /dev/null ); then
		arch-chroot "$@"
	else
		echo "ERROR: arch-chroot is not present, skipping"
		return 1
	fi
}

##########

case $1 in
	"open")
		echo "Don't forget to close the partition later using '${0##*/} close'"
		recovery_open
		;;
	"close") recovery_close ;;
	"sync")
		message "Upgrading main system"
		pacman -Syu

		message "Opening recovery system"
		recovery_open

		message "Synchronizing recovery script"
		cp /usr/local/bin/recovery $MOUNTPOINT/usr/local/bin/recovery

		message "Synchronizing personal files"
		for folder in "${SYNC_FOLDERS[@]}"; do
			rsync -av "$folder" $SYNC_DESTINATION
		done

		message "Synchronizing package caches"
		cp -v -u /var/lib/pacman/sync/{core,extra,community}.db $MOUNTPOINT/var/lib/pacman/sync/
		for i in $(pacman -Q $(pacman -Qq --root $MOUNTPOINT | grep -Fxvf <(pacman -Qqm --root $MOUNTPOINT) ) | sed 's/ /-/'); do
			cp -v -n /var/cache/pacman/pkg/$i* $MOUNTPOINT/var/cache/pacman/pkg/
		done

		message "Upgrading recovery system"
		try_chroot $MOUNTPOINT pacman -Syu

		message "Cleaning recovery system package cache"
		try_chroot $MOUNTPOINT paccache -vrk2
		try_chroot $MOUNTPOINT paccache -vruk0

		message "Closing recovery system"
		recovery_close
		;;
	"shell")
		recovery_open
		try_chroot $MOUNTPOINT /usr/bin/zsh
		recovery_close
		;;
	"compare")
		recovery_open
		message "Packages only in main system"
		comm -23 <(pacman -Qqe | sort) <(pacman -Qqe --root $MOUNTPOINT | sort)
		message "Packages only in recovery system"
		comm -13 <(pacman -Qqe | sort) <(pacman -Qqe --root $MOUNTPOINT | sort)
		recovery_close
		;;
	*)
		cat << EOF
Usage: recovery (open|close|sync|shell|compare)

  open        Unlocks the recovery LUKS volume
  close       Locks the recovery LUKS volume
  sync        Synchronizes files and upgrades the recovery system
  shell       Opens a shell in the recovery system
  compare     Compare packages between the main and recovery systems
EOF
		;;
esac
